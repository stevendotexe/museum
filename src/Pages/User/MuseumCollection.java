package Pages.User;

import Components.Cards.Collection.ItemCard;
import Components.Cards.Collection.RecentlyAddedContainer;
import Components.Cards.NavigationBar;
import Components.Cards.SearchBar;
import Components.Utilities.ContainerPopulator;
import Components.Utilities.CustomScrollBar;
import Components.Utilities.Item;
import Components.Utilities.ItemQueries;
import Components.Utilities.ImageResizer;
import static Components.Utilities.DatabaseConnection.getConnection;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.awt.image.BufferedImage;
import java.net.URL;
import javax.imageio.ImageIO;

public class MuseumCollection extends javax.swing.JFrame {
    private static final String NO_IMAGE_URL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQVREE8a8Z-siiy_X-r0tbjb9aDvOH7CEPcuA&s";
    private static final int ITEM_CARD_TITLE_LENGTH = 45;
    private final ExecutorService executorService = Executors.newFixedThreadPool(5);
    private Connection conn;
    private JPanel itemContainer;
    private JPanel paginationPanel;
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private String currentSearchText = "";
    private String currentCategory = "All";
    private int totalItems = 0;

    /**
     * Creates new form Collection
     */
    public MuseumCollection() {
        try {
            conn = getConnection();
        } catch (SQLException | ClassNotFoundException e) {
            e.getMessage();
            e.printStackTrace();
        }

        if (conn != null) {
            initComponents(conn);
            setSize(1280, 720);
            setLocationRelativeTo(null); // Center the window
        } else {
            throw new RuntimeException("Failed to establish database connection");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents(Connection conn) {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        // Create main content panel
        JPanel mainContent = new JPanel();
        mainContent.setLayout(new javax.swing.GroupLayout(mainContent));
        mainContent.setBackground(Color.WHITE);

        NavigationBar navigationBar = new NavigationBar();
        RecentlyAddedContainer recentlyAddedContainer = new RecentlyAddedContainer();
        recentlyAddedContainer.setPreferredSize(new java.awt.Dimension(1200, 300));
        
        // Create search and filter panel
        JPanel searchFilterPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 0));
        searchFilterPanel.setBackground(Color.WHITE);
        
        SearchBar searchBar = new SearchBar();
        searchBar.setPreferredSize(new java.awt.Dimension(400, 40));
        searchBar.addSearchListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentSearchText = searchBar.getSearchText();
                currentPage = 1;
                updateSearchResults();
            }
        });

        // Create category selector
        JComboBox<String> categorySelector = new JComboBox<>(new String[]{"All", "Artifact", "Painting", "Sculpture", "Document", "Other"});
        categorySelector.setPreferredSize(new java.awt.Dimension(150, 40));
        categorySelector.setFont(new Font("Arial", Font.PLAIN, 14));
        categorySelector.addActionListener(e -> {
            currentCategory = (String) categorySelector.getSelectedItem();
            System.out.println("Category selected: " + currentCategory);
            currentPage = 1;
            updateSearchResults();
        });

        // Add components to search filter panel
        searchFilterPanel.add(searchBar);
        searchFilterPanel.add(categorySelector);

        // Item Container - to contain all items
        itemContainer = new JPanel();
        itemContainer.setLayout(new java.awt.GridLayout(0, 1, 0, 10)); // Single column, 10px vertical gap
        
        // Pagination Panel
        paginationPanel = new JPanel();
        paginationPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        
        javax.swing.GroupLayout mainLayout = (javax.swing.GroupLayout) mainContent.getLayout();
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(navigationBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(recentlyAddedContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addGroup(mainLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(searchFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(mainLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(itemContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addComponent(paginationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainLayout.createSequentialGroup()
                    .addComponent(navigationBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(recentlyAddedContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(30)
                    .addComponent(searchFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(20)
                    .addComponent(itemContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(paginationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(30, Short.MAX_VALUE))
        );

        // Create scroll pane for main content
        JScrollPane mainScrollPane = new JScrollPane(mainContent);
        mainScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); // Always show scrollbar
        mainScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        mainScrollPane.setBorder(null);
        mainScrollPane.getVerticalScrollBar().setUnitIncrement(16); // Smoother scrolling
        mainScrollPane.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0)); // Set scrollbar width
        
        // Apply custom scrollbar styling
        CustomScrollBar.customizeScrollBar(mainScrollPane.getVerticalScrollBar());
        
        // Ensure the scrollbar is visible
        mainScrollPane.getVerticalScrollBar().setVisible(true);
        mainScrollPane.getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);

        // Set the scroll pane as the content pane
        setContentPane(mainScrollPane);

        try {
            // Load recently added items with async image loading
            ResultSet rs = ItemQueries.getRecentlyAddedItems(conn);
            if (rs != null) {
                // Load the container first, images will be loaded asynchronously
                ContainerPopulator.populateRecentlyAddedContainer(recentlyAddedContainer, rs);
                System.err.println("Populated RecentlyAddedContainer");
            }
            
            // Initial search results (page loads first, images load async)
            updateSearchResults();
            
            // Scroll to top after content is loaded
            SwingUtilities.invokeLater(() -> {
                mainScrollPane.getVerticalScrollBar().setValue(0);
                mainScrollPane.getViewport().setViewPosition(new Point(0, 0));
            });
            
        } catch (SQLException e) {
            System.out.println("Failed to fetch items");
            e.printStackTrace();
        }

        pack();
    }

    private void updateSearchResults() {
        try {
            // Clear existing items
            itemContainer.removeAll();
            
            System.out.println("Updating search results with:");
            System.out.println("Search text: " + currentSearchText);
            System.out.println("Category: " + currentCategory);
            System.out.println("Page: " + currentPage);
            
            // Get total items for pagination
            totalItems = ItemQueries.getTotalSearchResults(conn, currentSearchText, currentCategory);
            System.out.println("Total items found: " + totalItems);
            
            // Get items for current page
            ResultSet rs = ItemQueries.searchItems(conn, currentSearchText, currentCategory, currentPage, itemsPerPage);
            
            int itemsFound = 0;
            while (rs.next()) {
                itemsFound++;
                Item item = new Item(
                    rs.getInt("item_id"),
                    rs.getString("item_name"),
                    rs.getString("image_url"),
                    rs.getString("item_description"),
                    rs.getString("location_found"),
                    rs.getString("category"),
                    rs.getString("date_discovered"),
                    rs.getString("created_at"),
                    rs.getString("modified_at"),
                    rs.getBoolean("is_exhibited")
                );
                
                System.out.println("Found item: " + item.getName() + " (Category: " + item.getCategory() + ")");
                
                // Check if image URL is valid
                String imageUrl = item.getImageUrl();
                boolean hasValidImage = imageUrl != null && !imageUrl.isEmpty() && !imageUrl.equals(NO_IMAGE_URL);
                
                // Create ItemCard with null checks and truncated name (45 chars for main items)
                String itemName = item.getName() != null ? item.getName() : "Unnamed Item";
                if (itemName.length() > ITEM_CARD_TITLE_LENGTH) {
                    itemName = itemName.substring(0, ITEM_CARD_TITLE_LENGTH - 3) + "...";
                }
                final String finalItemName = itemName;
                
                // Create ItemCard with loading state
                ItemCard itemCard = new ItemCard(
                    itemName,
                    null, // No image initially
                    item.getDescription() != null ? item.getDescription() : "No description available",
                    item.getDateAdded() != null ? item.getDateAdded() : "Unknown date",
                    item.getCategory() != null ? item.getCategory() : "Uncategorized"
                );
                
                // Set loading state if there's a valid image URL
                if (hasValidImage) {
                    itemCard.setImageLoading(true);
                }
                
                // Add hover effect and click behavior
                itemCard.setCursor(new Cursor(Cursor.HAND_CURSOR));
                itemCard.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        itemCard.setBorder(BorderFactory.createCompoundBorder(
                            BorderFactory.createLineBorder(new Color(200, 200, 200)),
                            BorderFactory.createEmptyBorder(5, 5, 5, 5)
                        ));
                        itemCard.setBackground(new Color(245, 245, 245));
                    }
                    
                    @Override
                    public void mouseExited(MouseEvent e) {
                        itemCard.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                        itemCard.setBackground(Color.WHITE);
                    }
                    
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        new ItemProfile(item.getId()).setVisible(true);
                    }
                });
                
                // Add card to container first (UI loads quickly)
                itemContainer.add(itemCard);
                
                // Load image asynchronously in background
                if (hasValidImage) {
                    final String finalImageUrl = imageUrl;
                    final ItemCard finalItemCard = itemCard;
                    
                    executorService.submit(() -> {
                        try {
                            // Load and scale image in background
                            URL url = new URL(finalImageUrl);
                            BufferedImage originalImage = ImageIO.read(url);
                            if (originalImage != null) {
                                Image resizedImage = ImageResizer.resizeImage(originalImage, 200, 200);
                                ImageIcon imageIcon = new ImageIcon(resizedImage);
                                
                                // Update UI on EDT
                                SwingUtilities.invokeLater(() -> {
                                    finalItemCard.setImage(imageIcon);
                                    finalItemCard.setImageLoading(false);
                                    finalItemCard.revalidate();
                                    finalItemCard.repaint();
                                });
                            } else {
                                showNoImage(finalItemCard);
                            }
                        } catch (Exception e) {
                            System.err.println("Error loading image for item: " + finalItemName);
                            e.printStackTrace();
                            showNoImage(finalItemCard);
                        }
                    });
                }
            }
            
            // Update pagination
            updatePagination();
            
            // Refresh the UI
            itemContainer.revalidate();
            itemContainer.repaint();
            paginationPanel.revalidate();
            paginationPanel.repaint();
            
            // Scroll to top after updating results
            SwingUtilities.invokeLater(() -> {
                JScrollPane scrollPane = (JScrollPane) getContentPane();
                scrollPane.getVerticalScrollBar().setValue(0);
                scrollPane.getViewport().setViewPosition(new Point(0, 0));
            });
            
        } catch (SQLException e) {
            System.out.println("Failed to update search results");
            e.printStackTrace();
        }
    }

    private void showNoImage(ItemCard itemCard) {
        SwingUtilities.invokeLater(() -> {
            itemCard.setImageLoading(false);
            itemCard.setImageError(true);
            itemCard.revalidate();
            itemCard.repaint();
        });
    }

    private void updatePagination() {
        paginationPanel.removeAll();
        paginationPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 5));
        
        int totalPages = (int) Math.ceil((double) totalItems / itemsPerPage);
        
        // Add items per page selector
        JLabel itemsPerPageLabel = new JLabel("Items per page:");
        JComboBox<String> itemsPerPageSelector = new JComboBox<>(new String[]{"5", "10", "20", "50"});
        itemsPerPageSelector.setSelectedItem(String.valueOf(itemsPerPage));
        itemsPerPageSelector.addActionListener(e -> {
            itemsPerPage = Integer.parseInt((String) itemsPerPageSelector.getSelectedItem());
            currentPage = 1;
            updateSearchResults();
        });
        
        // Add page status label
        JLabel pageStatus = new JLabel(String.format("Page %d of %d", currentPage, totalPages));
        pageStatus.setFont(new Font("Arial", Font.PLAIN, 12));
        
        // Style for pagination buttons
        Dimension buttonSize = new Dimension(40, 30);
        Font buttonFont = new Font("Arial", Font.PLAIN, 12);
        
        if (totalPages > 1) {
            // Previous button
            if (currentPage > 1) {
                JButton prevButton = new JButton("←");
                prevButton.setPreferredSize(buttonSize);
                prevButton.setFont(buttonFont);
                prevButton.setToolTipText("Previous Page");
                prevButton.addActionListener(e -> {
                    currentPage--;
                    updateSearchResults();
                });
                paginationPanel.add(prevButton);
            }
            
            // First page button
            if (currentPage > 2) {
                JButton firstPageButton = new JButton("1");
                firstPageButton.setPreferredSize(buttonSize);
                firstPageButton.setFont(buttonFont);
                firstPageButton.addActionListener(e -> {
                    currentPage = 1;
                    updateSearchResults();
                });
                paginationPanel.add(firstPageButton);
                
                if (currentPage > 3) {
                    paginationPanel.add(new JLabel("..."));
                }
            }
            
            // Page numbers around current page
            for (int i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
                final int pageNum = i;
                JButton pageButton = new JButton(String.valueOf(i));
                pageButton.setPreferredSize(buttonSize);
                pageButton.setFont(buttonFont);
                if (i == currentPage) {
                    pageButton.setEnabled(false);
                    pageButton.setBackground(new Color(0, 123, 255));
                    pageButton.setForeground(Color.WHITE);
                }
                pageButton.addActionListener(e -> {
                    currentPage = pageNum;
                    updateSearchResults();
                });
                paginationPanel.add(pageButton);
            }
            
            // Last page button
            if (currentPage < totalPages - 1) {
                if (currentPage < totalPages - 2) {
                    paginationPanel.add(new JLabel("..."));
                }
                JButton lastPageButton = new JButton(String.valueOf(totalPages));
                lastPageButton.setPreferredSize(buttonSize);
                lastPageButton.setFont(buttonFont);
                lastPageButton.addActionListener(e -> {
                    currentPage = totalPages;
                    updateSearchResults();
                });
                paginationPanel.add(lastPageButton);
            }
            
            // Next button
            if (currentPage < totalPages) {
                JButton nextButton = new JButton("→");
                nextButton.setPreferredSize(buttonSize);
                nextButton.setFont(buttonFont);
                nextButton.setToolTipText("Next Page");
                nextButton.addActionListener(e -> {
                    currentPage++;
                    updateSearchResults();
                });
                paginationPanel.add(nextButton);
            }
        }
        
        // Add components to panel
        paginationPanel.add(itemsPerPageLabel);
        paginationPanel.add(itemsPerPageSelector);
        paginationPanel.add(Box.createHorizontalStrut(20));
        paginationPanel.add(pageStatus);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MuseumCollection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MuseumCollection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MuseumCollection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MuseumCollection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MuseumCollection().setVisible(true);
            }
        });
    }
}