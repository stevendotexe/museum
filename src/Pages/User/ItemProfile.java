/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Pages.User;

import Components.Utilities.DatabaseConnection;
import Components.Utilities.ImageResizer;
import javax.swing.*;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.net.URL;
import javax.imageio.ImageIO;
import java.io.IOException;

/**
 *
 * @author USER
 */
public class ItemProfile extends javax.swing.JFrame {
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMMM yyyy HH:mm");
    private final int itemId;

    /**
     * Creates new form ItemProfile
     * @param itemId The ID of the item to display
     */
    public ItemProfile(int itemId) {
        this.itemId = itemId;
        initComponents();
        setSize(1280, 720);
        setLocationRelativeTo(null);
        setBackground(Color.WHITE);
        loadItemData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        itemName = new javax.swing.JLabel();
        collectionName = new javax.swing.JLabel();
        DescriptionLabel = new javax.swing.JLabel();
        itemDescription = new javax.swing.JTextPane();
        imageLabel = new javax.swing.JLabel();
        createdAt = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        itemName.setFont(new java.awt.Font("DM Sans", 1, 24)); // NOI18N
        itemName.setText("Item Name");

        collectionName.setFont(new java.awt.Font("DM Sans", 0, 10)); // NOI18N
        collectionName.setText("Category and Location");

        DescriptionLabel.setFont(new java.awt.Font("DM Sans", 0, 12)); // NOI18N
        DescriptionLabel.setText("Description");

        itemDescription.setFont(new java.awt.Font("DM Sans", 0, 12)); // NOI18N
        itemDescription.setEditable(false);
        itemDescription.setBackground(new java.awt.Color(255, 255, 255));
        itemDescription.setBorder(null);

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setText("No image available");

        createdAt.setFont(new java.awt.Font("DM Sans", 0, 12)); // NOI18N
        createdAt.setText("Dates");

        backButton.setText("Back");
        backButton.setFont(new java.awt.Font("DM Sans", 0, 12));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispose();
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(collectionName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemName, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(DescriptionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(collectionName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createdAt, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createdAt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    /**
     * Truncates text to a maximum length and adds ellipsis if needed.
     */
    private String truncateText(String text, int maxLength) {
        if (text == null || text.length() <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + "...";
    }

    /**
     * Loads and displays the item data from the database.
     */
    private void loadItemData() {
        String query = "SELECT * FROM item WHERE item_id = ?";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, itemId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                displayItemData(rs);
            } else {
                showError("Item not found");
            }
        } catch (SQLException | ClassNotFoundException e) {
            showError("Error loading item data: " + e.getMessage());
        }
    }

    /**
     * Displays the item data from the ResultSet.
     */
    private void displayItemData(ResultSet rs) throws SQLException {
        // Set basic information
        itemName.setText(rs.getString("item_name"));
        
        // Set description with proper wrapping
        StyledDocument doc = new DefaultStyledDocument();
        try {
            doc.insertString(0, rs.getString("item_description"), null);
            StyleConstants.setLineSpacing(doc.getStyle("default"), 0.2f);
            itemDescription.setDocument(doc);
        } catch (Exception e) {
            itemDescription.setText("Description not available");
        }
        
        // Set category and location
        String category = rs.getString("category");
        String location = rs.getString("location_found");
        collectionName.setText("Category: " + category + " | Location: " + location);
        
        // Set dates
        Timestamp dateDiscovered = rs.getTimestamp("date_discovered");
        Timestamp createdAt = rs.getTimestamp("created_at");
        Timestamp modifiedAt = rs.getTimestamp("modified_at");
        
        String dateText = "Discovered: " + 
            (dateDiscovered != null ? dateFormat.format(dateDiscovered) : "N/A");
        if (createdAt != null) {
            dateText += " | Created: " + dateFormat.format(createdAt);
        }
        if (modifiedAt != null) {
            dateText += " | Modified: " + dateFormat.format(modifiedAt);
        }
        this.createdAt.setText(dateText);

        // Load image
        loadItemImage(rs.getString("image_url"));
    }

    /**
     * Loads and displays the item's image.
     */
    private void loadItemImage(String imageUrl) {
        if (imageUrl == null || imageUrl.isEmpty()) {
            imageLabel.setText("No image available");
            return;
        }

        try {
            URL url = new URL(imageUrl);
            Image image = ImageIO.read(url);
            if (image != null) {
                Image resizedImage = ImageResizer.resizeImage(image, 400, 400);
                imageLabel.setIcon(new ImageIcon(resizedImage));
                imageLabel.setText(""); // Clear text when image is loaded
            } else {
                imageLabel.setText("Image not available");
            }
        } catch (IOException e) {
            imageLabel.setText("Error loading image");
        }
    }

    /**
     * Shows an error message and closes the window.
     */
    private void showError(String message) {
        JOptionPane.showMessageDialog(this,
            message,
            "Error",
            JOptionPane.ERROR_MESSAGE);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ItemProfile(1).setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel DescriptionLabel;
    private javax.swing.JLabel collectionName;
    private javax.swing.JLabel createdAt;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JTextPane itemDescription;
    private javax.swing.JLabel itemName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton backButton;
    // End of variables declaration                   
}
